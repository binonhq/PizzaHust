openapi: 3.0.0
info:
  title: Pizza Hut API
  version: 1.0.0
paths:
  /users:
    get:
      summary: Get all users
      tags:
        - User API
      responses:
        '200':
          description: Successful response
    post:
      summary: Create a new user
      tags:
        - User API
      requestBody:
        $ref: '#/components/requestBodies/SignupBody'
      responses:
        '201':
          description: User created successfully
        '400':
          description: Bad request
        '500':
          description: Internal server error
  /users/{id}:
    get:
      summary: Get a user by ID
      tags:
        - User API
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Successful response
        '404':
          description: User not found
        '500':
          description: Internal server error
    put:
      summary: Update a user by ID
      tags:
        - User API
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        '200':
          description: User updated successfully
        '404':
          description: User not found
        '500':
          description: Internal server error
    delete:
      summary: Delete a user by ID
      tags:
        - User API
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        '200':
          description: User deleted successfully
        '404':
          description: User not found
        '500':
          description: Internal server error
  /pizzas:
    get:
      summary: Get all pizzas
      tags:
        - Pizza API
      responses:
        '200':
          description: Successful response
    post:
      summary: Create a new pizza
      tags:
        - Pizza API
      requestBody:
        $ref: '#/components/requestBodies/PostPizzaBody'
      responses:
        '201':
          description: Pizza created successfully
        '400':
          description: Bad request
        '500':
          description: Internal server error

  /pizzas/{id}:
    get:
      summary: Get a pizza by ID
      tags:
        - Pizza API
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Successful response
        '404':
          description: Pizza not found
        '500':
          description: Internal server error
    put:
      summary: Update a pizza by ID
      tags:
        - Pizza API
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      requestBody:
        $ref: '#/components/requestBodies/PostPizzaBody'
      responses:
        '200':
          description: Pizza updated successfully
        '404':
          description: Pizza not found
        '500':
          description: Internal server error
    delete:
      summary: Delete a pizza by ID
      tags:
        - Pizza API
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Pizza deleted successfully
        '404':
          description: Pizza not found
        '500':
          description: Internal server error

  /toppings:
    get:
      summary: Get all toppings
      tags:
        - Topping API
      responses:
        '200':
          description: Successful response
    post:
      summary: Create a new topping
      tags:
        - Topping API
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Topping'
      responses:
        '201':
          description: Topping created successfully
        '400':
          description: Bad request
        '500':
          description: Internal server error

  /toppings/{id}:
    get:
      summary: Get a topping by ID
      tags:
        - Topping API
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Successful response
        '404':
          description: Topping not found
        '500':
          description: Internal server error
    put:
      summary: Update a topping by ID
      tags:
        - Topping API
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Topping'
      responses:
        '200':
          description: Topping updated successfully
        '404':
          description: Topping not found
        '500':
          description: Internal server error
    delete:
      summary: Delete a topping by ID
      tags:
        - Topping API
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Topping deleted successfully
        '404':
          description: Topping not found
        '500':
          description: Internal server error
components:
  schemas:
    User:
      type: object
      properties:
        username:
          type: string
        passwordHash:
          type: string
        salt:
          type: string
        isAdmin:
          type: boolean
        name:
          type: string
        email:
          type: string
        phoneNumber:
          type: string
        address:
          type: string
        cart:
          type: array
          items:
            type: object
            properties:
              pizza:
                type: string
                description: Reference to Pizza model
              pizzaSize:
                type: string
                enum: ['S', 'M', 'L']
              toppings:
                type: string
                description: Reference to Topping model
              quantity:
                type: number
        order:
          type: array
          items:
            type: string
            description: Reference to Order model
        createdAt:
          type: string
        updatedAt:
          type: string
      required:
        - username
        - passwordHash
        - salt
        - isAdmin
        - name
        - email
        - phoneNumber
        - address
    Order:
      type: object
      properties:
        user:
          type: string
          description: Reference to User model
        items:
          type: array
          items:
            type: object
            properties:
              pizza:
                type: string
                description: Reference to Pizza model
              pizzaSize:
                type: string
                enum: ['S', 'M', 'L']
              toppings:
                type: array
                items:
                  type: string
                  description: Reference to Topping model
              quantity:
                type: number
        status:
          type: string
          enum: ['pending', 'paid', 'cancel']
        price:
          type: number
          minimum: 0
        createdAt:
          type: string
        updatedAt:
          type: string
      required:
        - user
        - items
        - status
      example:
        user: 603f650e35b3de235c89eb24
        items:
          - pizza: 603f650e35b3de235c89eb25
            pizzaSize: S
            toppings: [603f650e35b3de235c89eb26]
            quantity: 2
        status: pending
        price: 25.0
    Pizza:
      type: object
      properties:
        name:
          type: string
        description:
          type: string
        imageUrl:
          type: string
        priceS:
          type: number
          minimum: 0
          description: Price for size 'S'
        priceM:
          type: number
          minimum: 0
          description: Price for size 'M'
        priceL:
          type: number
          minimum: 0
          description: Price for size 'L'
        createdAt:
          type: string
        updatedAt:
          type: string
      required:
        - name
        - description
        - imageUrl
        - priceS
        - priceM
        - priceL
      example:
        name: Margherita
        description: Classic Italian pizza with tomato and mozzarella
        imageUrl: https://example.com/margherita.jpg
        priceS: 10.0
        priceM: 15.0
        priceL: 20.0
    Topping:
      type: object
      properties:
        name:
          type: string
        description:
          type: string
        imageUrl:
          type: string
        price:
          type: number
          minimum: 0
      required:
        - name
        - description
        - imageUrl
        - price
      example:
        name: Pepperoni
        description: Classic pepperoni topping
        imageUrl: https://example.com/pepperoni.jpg
        price: 2.0
  requestBodies:
    SignupBody:
      description: A JSON object containing user information
      required: true
      content:
        application/json:
          schema:
            type: object
            properties:
              username:
                type: string
              password:
                type: string
              name:
                type: string
              email:
                type: string
              phoneNumber:
                type: string
              address:
                type: string
          example:
            username: john_doe
            password: password
            name: John Doe
            email: johndoe@example.com
            phoneNumber: 123-456-7890
            address: 123 Main Street, Anytown, CA 91234
    PostPizzaBody:
      description: A JSON object containing pizza information
      required: true
      content:
        application/json:
          schema:
            type: object
            properties:
              name:
                type: string
              description:
                type: string
              priceS:
                type: number
              priceM:
                type: number
              priceL:
                type: number
          example:
            name: Margherita
            description: Classic Italian pizza with tomato and mozzarella
            imageUrl: https://example.com/margherita.jpg
            priceS: 10
            priceM: 15
            priceL: 20







